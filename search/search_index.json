{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenue au cours S\u00e9curit\u00e9 des applications web en JSP","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Dans ce cours, nous allons cr\u00e9er des applications web \u00e0 l'aide du langage de programmation Java et le cadriciel Spring. Nous verrons \u00e9galement comment s\u00e9curiser les diff\u00e9rentes applications cr\u00e9\u00e9es contre les attaques les plus courantes.</p> <p>Ce cours couvrira diff\u00e9rents types d'applications, soit:</p> <ul> <li>Applications web MVC</li> <li>APIs RESTful</li> </ul>"},{"location":"#outils-utilises","title":"Outils utilis\u00e9s","text":"<ul> <li>Java</li> <li>Cadriciel Spring</li> <li>MySQL/SQLite</li> <li>IntelliJ IDEa Ultimate</li> <li>Tomcat</li> <li>Pages JSP</li> <li>Serveur Ubuntu</li> </ul>"},{"location":"config-servlet/","title":"Configuration d'un servlet","text":""},{"location":"config-servlet/#les-servlet","title":"Les servlet","text":"<p>Pour configurer un servlet Java, il nous suffit simplement de cr\u00e9er une classe qui h\u00e9rite de la classe <code>HttpServlet</code>. En plus des diff\u00e9rentes m\u00e9thodes HTTP, il est aussi possible de d\u00e9finir les m\u00e9thodes <code>init()</code> et <code>destroy</code> qui sont appel\u00e9es lors de l'initialisation et de le destruction du servlet respectivement.</p> <p>Pour que la configuration automatique du servlet puisse se faire, on ajoutera l'annotation <code>@WebServlet</code> tout en sp\u00e9cifiant les valeurs des attributs <code>name</code> et <code>value</code>.</p> <pre><code>@WebServlet(name = \"HelloServlet\", value = \"/hello\")\npublic class HelloServlet extends HttpServlet {\n\n    private String message;\n\n    public void init() {\n        message = \"Hello World!\";\n    }\n\n}\n</code></pre>"},{"location":"config-servlet/#methodes-http","title":"M\u00e9thodes HTTP","text":"<p>Il suffit maintenant de configurer les diff\u00e9rentes m\u00e9thodes HTTP pour permettre de r\u00e9pondre aux requ\u00eates. Chacune des m\u00e9thodes HTTP (doGet, doPost, etc.) recevra deux (2) param\u00e8tres, so\u00eet la requ\u00eate et la r\u00e9ponse de type <code>HttpServletRequest</code> et <code>HttpServletResponse</code> respectivement.</p>"},{"location":"config-servlet/#ecrire-la-reponse","title":"\u00c9crire la r\u00e9ponse","text":"<p>Il est possible d'\u00e9crire nous m\u00eame la r\u00e9ponse d'une m\u00e9thode HTTP. Pour faire cela, il faudra tout d'abord indiquer le type de contenu que nous retournerons, puis de r\u00e9cup\u00e9rer le flux de sortie de la r\u00e9ponse et d'y \u00e9crire le code HTML.</p> <p>Voici un exemple de la m\u00e9thode <code>doGet</code> du servlet configur\u00e9 pr\u00e9alablement ci-dessus.</p> <pre><code>public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        // Indiquer le typer de contenu\n        response.setContentType(\"text/html\");\n\n        // R\u00e9cup\u00e9rer le flux de sortie et y \u00e9crire le HTML\n        PrintWriter out = response.getWriter();\n        out.println(\"&lt;html&gt;&lt;body&gt;\");\n        out.println(\"&lt;h1&gt;\" + message + \"&lt;/h1&gt;\");\n        out.println(\"&lt;/body&gt;&lt;/html&gt;\");\n    }\n</code></pre> <p>Bien entendu cet exemple est relativement simple. Nous pourrions \u00e9galement acc\u00e9der \u00e0 l'objet <code>request</code> afin de r\u00e9cup\u00e9rer de l'information sur la requ\u00eate entrante.</p> <p>\u00c9crire tout le code d'une page HTML via le flux de sortie comme ci-dessus peut rapidement devenir tr\u00e8s lourd et plut\u00f4t difficile \u00e0 \u00e9crire. Pour tirer avantage des outils que nous avons \u00e0 notre disposition, nous utiliserons plut\u00f4t les pages JSP.</p> <p>La technologie JSP (Java Server Pages) nous permet d'\u00e9crire du code Java dans nos pages HTML, un peu comme les pages Razor (C#) ou Blade (PHP).</p> <p>Pour demander \u00e0 un m.thode de servlet de rediriger vers une page JSP, il faudra r\u00e9cup\u00e9rer le <code>requestDispatcher</code>, lui indiquer la page qu'on veut utiliser, puis transf\u00e9rer la requ\u00eate et la r\u00e9ponse vers cette page.</p> <pre><code>public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        request.getRequestDispatcher(\"/index.jsp\").forward(request, response);\n    }\n</code></pre> <p>De cette fa\u00e7on, on redirigerait vers la page <code>index.jsp</code>.</p> <p>Info</p> <p>Notez qu'on pourra passer des informations vers la page en les ajoutant dans l'objet <code>request</code>. Les pages JSP ont un acc\u00e8s facile \u00e0 plusieurs variables dont celle-ci. La section sur les pages JSP contient plus d'informations \u00e0 cet effet.</p>"},{"location":"maven-dependences/","title":"Annexe A - D\u00e9pendances Maven utiles","text":""},{"location":"maven-dependences/#dependences-frequemment-utilisees","title":"D\u00e9pendences fr\u00e9quemment utilis\u00e9es","text":"Disponibles lors de la g\u00e9n\u00e9ration du projet <ul> <li>Developer Tools<ul> <li>Lombok (Cr\u00e9ation plus rapide des classes)</li> <li>Spring Configuration Processor (Donne l'auto compl\u00e9tion lors de la configuration des propri\u00e9t\u00e9s)</li> </ul> </li> <li>Web<ul> <li>Spring Web (Apporte les fonctionalit\u00e9s n\u00e9cessires aux application web)</li> </ul> </li> <li>SQL<ul> <li>Sring Data JPA (ORM, permet une gestion \"code first\" de la base de donn\u00e9es)</li> <li>MySQL Driver (Permet la connexion \u00e0 une BD MySQL) -Security</li> <li>Spring Security (D\u00e9pendance de base pour la s\u00e9curit\u00e9) </li> <li>OAuth2 Resource Server (Fonctionalit\u00e9s pratiques pour la gestion des API et des m\u00e9canismes d'authetification \u00e0 l'aide de jetons (tokens))</li> </ul> </li> </ul> Pour utiliser les pages JSP <ul> <li>Serveur pour les pages JSP <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;\n    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Balises JSTL (taglib) <pre><code>&lt;dependency&gt;\n        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\n        &lt;artifactId&gt;apache-jstl&lt;/artifactId&gt;\n        &lt;version&gt;11.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre></li> </ul> Pour utiliser SQLite <ul> <li>Driver pour SQLite <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.xerial&lt;/groupId&gt;\n    &lt;artifactId&gt;sqlite-jdbc&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Dialecte pour le connecteur <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.hibernate.orm&lt;/groupId&gt;\n    &lt;artifactId&gt;hibernate-community-dialects&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></li> </ul>"},{"location":"tomcat/","title":"Architecture de Tomcat et des servlets","text":""},{"location":"tomcat/#serveur-tomcat","title":"Serveur Tomcat","text":"<p>Un serveur Tomcat (nom complet Apache Tomcat) est une impl\u00e9mentation de plusieurs sp\u00e9cifications Jakarta EE (anciennement Java EE) qui permet de cr\u00e9er des serveurs HTTP en Java \"pur\". Tomcat impl\u00e9mente entre autre les sp\u00e9cifications pour les servlet Java et les pages JSP.</p> <p>Un serveur Tomcat est configur\u00e9 par plusieurs fichiers XML. Son architecture interne ressemble \u00e0 ceci</p> <p></p> <p>Gr\u00e2ce \u00e0 cette architecture, on peut d\u00e9ployer plusieurs applications web sur le m\u00eame serveur. Chacune d'entre elle sera alors contenue dans son propre context. Par exemple si j'ai deux applications web nomm\u00e9es Application1 et Application2, chacune d'entre elle aura son contexte propre.</p> <p>On pourrait donc acc\u00e9der \u00e0 ces applications \u00e0 l'aide des adresses suivantes:</p> <ul> <li>http://localhost:8080/Application1</li> <li>http://localhost:8080/Application2</li> </ul>"},{"location":"tomcat/#servlets-java","title":"Servlets Java","text":"<p>Un servlet Java est principalement un programme Java qui permet de traiter des requ\u00eates HTTP. Un serveur comme Tomcat est requis pour pouvoir ex\u00e9cuter un servlet Java. On peut voir les servlets comme une petite partie du serveur, voir m\u00eame comme une API.</p> <p>Les servlets impl\u00e9mentent diff\u00e9rentes m\u00e9thodes qui r\u00e9pondent aux diff\u00e9rentes requ\u00eates HTTP.</p> M\u00e9thode du servlet Requ\u00eate HTTP associ\u00e9e <code>doGet</code> HTTP GET <code>doPost</code> HTTP POST <code>doPut</code> HTTP PUT <code>doDelete</code> HTTP DELETE <p>La configuration d'un servlet Java inclut toujours les attributs suivants:</p> <ul> <li>name: Le nom du servlet</li> <li>value: Le point de terminaison du servlet</li> </ul> <p>Dans les applications web Java plus anciennes, il fallait configurer manuellement les servlets dans le fichier web.xml. La modernisation des IDE fait que maintenant tout peut se faire de fa\u00e7on automatique. Cependant la configuration en XML g\u00e9n\u00e9r\u00e9e ressemblera \u00e0 ceci:</p> <pre><code>&lt;servlet&gt;\n    &lt;servlet-name&gt;{name}&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;{name}&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;{name}&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;{value}&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</code></pre> <p>Ainsi, pour atteindre les diff\u00e9rentes m\u00e9thodes du servlet, on enverra des requ\u00eatre HTTP \u00e0 l'adresse</p> <p><code>http://localhost:8080/{contexte}/{value}</code></p> <p>Donc pour le contexte Application1 et le servlet ayant comme valeur /hello on enverra nos requ\u00eates \u00e0 l'adresse.</p> <p><code>http://localhost:8080/Application1/hello</code></p>"},{"location":"tomcat/#le-traitement-des-requetes","title":"Le traitement des requ\u00eates.","text":"<p>Chaque servlet Java impl\u00e9mente \u00e9galement une m\u00e9thode nomm\u00e9e <code>service()</code>. Cette m\u00e9thode sert de point d'entr\u00e9e et de r\u00e9partiteur pour les diff\u00e9rentes m\u00e9thodes du servlet. C'est la m\u00e9thode <code>service()</code> qui redirigera vers les m\u00e9thodes telles que <code>doGet()</code> ou <code>doPost()</code> par exemple. Ainsi une requ\u00eate suivra la cha\u00eene de m\u00e9thodes suivante.</p> <p></p>"}]}